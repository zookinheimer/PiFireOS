name: Build Release Image

on:
  workflow_dispatch:
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Update apt
        run: sudo apt-get update

      - name: Install system dependencies
        run: |
          sudo apt-get install -y \
            gawk util-linux coreutils p7zip-full git qemu-user-static \
            binfmt-support python3-git

      - name: Checkout CustomPiOS
        uses: actions/checkout@v4
        with:
          repository: guysoft/CustomPiOS
          path: CustomPiOS

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          path: repository
          submodules: true

      # 1) Base overlay: noninteractive apt/dpkg + needrestart + block service restarts
      - name: Drop noninteractive config in base overlay
        run: |
          set -euo pipefail
          BASE="repository/src/filesystem"
          mkdir -p "$BASE/etc/apt/apt.conf.d" \
                   "$BASE/etc/dpkg/dpkg.cfg.d" \
                   "$BASE/etc/needrestart/conf.d" \
                   "$BASE/usr/sbin"

          # APT noninteractive + always choose maintainer's conffiles (avoids prompts)
          cat > "$BASE/etc/apt/apt.conf.d/00-ci-noninteractive" <<'EOF'
          APT::Get::Assume-Yes "true";
          Acquire::Retries "5";
          DPkg::Options { "--force-confdef"; "--force-confnew"; };
          EOF

          # dpkg defaults too (covers direct dpkg invocations)
          cat > "$BASE/etc/dpkg/dpkg.cfg.d/00-force-conf" <<'EOF'
          force-confdef
          force-confnew
          EOF

          # needrestart: auto-accept restarts, silence kernel hints
          cat > "$BASE/etc/needrestart/conf.d/10-auto.conf" <<'EOF'
          $nrconf{restart} = 'a';
          $nrconf{kernelhints} = 0;
          EOF

          # Don't try to start services inside chroot
          cat > "$BASE/usr/sbin/policy-rc.d" <<'EOF'
          #!/bin/sh
          exit 101
          EOF
          chmod +x "$BASE/usr/sbin/policy-rc.d"

      # 2) Earliest module: enforce settings inside chroot and pre-install initramfs-tools*
      - name: Create first module to preseed initramfs-tools
        run: |
          set -euo pipefail
          MOD="repository/src/modules/00-preseed-initramfs"
          mkdir -p "$MOD"

          cat > "$MOD/start_chroot_script" <<'EOF'
          #!/bin/bash
          set -euxo pipefail
          export DEBIAN_FRONTEND=noninteractive

          # Re-assert configs in chroot (in case base overlay ordering changes)
          install -d /etc/apt/apt.conf.d /etc/dpkg/dpkg.cfg.d /etc/needrestart/conf.d /usr/sbin
          cat > /etc/apt/apt.conf.d/00-ci-noninteractive <<'EOC'
          APT::Get::Assume-Yes "true";
          Acquire::Retries "5";
          DPkg::Options { "--force-confdef"; "--force-confnew"; };
          EOC
          cat > /etc/dpkg/dpkg.cfg.d/00-force-conf <<'EOC'
          force-confdef
          force-confnew
          EOC
          cat > /etc/needrestart/conf.d/10-auto.conf <<'EOC'
          $nrconf{restart} = 'a';
          $nrconf{kernelhints} = 0;
          EOC
          cat > /usr/sbin/policy-rc.d <<'EOC'
          #!/bin/sh
          exit 101
          EOC
          chmod +x /usr/sbin/policy-rc.d

          # Preconfigure the problematic packages explicitly using --force-confnew
          apt-get update
          apt-get -o DPkg::Options::=--force-confnew install -y initramfs-tools-core initramfs-tools
          EOF
          chmod +x "$MOD/start_chroot_script"

          # Make sure our module runs first
          if grep -q '^ACTIVATE_MODULES=' repository/src/config; then
            sed -i 's/^ACTIVATE_MODULES="\([^"]*\)"/ACTIVATE_MODULES="00-preseed-initramfs \1"/' repository/src/config
          else
            echo 'ACTIVATE_MODULES="00-preseed-initramfs ${ACTIVATE_MODULES}"' >> repository/src/config
          fi

      - name: Download Raspberry Pi OS (armhf lite)
        run: |
          cd repository/src/image
          wget -c --trust-server-names 'https://downloads.raspberrypi.org/raspios_lite_armhf_latest'

      - name: Update CustomPiOS paths
        run: |
          cd repository/src
          ../../CustomPiOS/src/update-custompios-paths

      - name: Show qemu binfmt registrations
        run: |
          sudo update-binfmts --display qemu-arm || true
          sudo update-binfmts --display qemu-aarch64 || true

      - name: Build Image
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo modprobe loop
          cd repository/src
          sudo bash -x ./build_dist

      - name: Copy output image
        if: success()
        id: copy
        run: |
          source repository/src/config
          image=PiFireOS-${{ github.ref_name }}
          cp repository/src/workspace/*.img ${image}.img
          echo "image=${image}" >> $GITHUB_ENV

      - name: Compress image
        if: success()
        run: zip "${{ env.image }}.zip" "${{ env.image }}.img"

      - name: Upload to release - ${{ github.ref_name }}
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.image }}.zip

      - name: Print last lines of build.log on failure
        if: failure()
        run: |
          echo "===== repository/src/build.log (tail) ====="
          tail -n 400 repository/src/build.log || true

      - name: Upload build & chroot logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: custompios-logs
          path: |
            repository/src/build.log
            repository/src/workspace/build.log
            repository/src/workspace/chroot/var/log/apt/term.log
            repository/src/workspace/chroot/var/log/dpkg.log
            repository/src/workspace/chroot/var/log/apt/history.log
          if-no-files-found: warn
