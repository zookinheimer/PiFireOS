name: Build Release Image

on:
  workflow_dispatch:
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Update apt
        run: sudo apt-get update

      # CustomPiOS deps (from its docs) + extras that help in CI
      - name: Install system dependencies
        run: |
          sudo apt-get install -y \
            gawk util-linux coreutils p7zip-full git qemu-user-static \
            binfmt-support python3-git

      - name: Checkout CustomPiOS
        uses: actions/checkout@v4
        with:
          repository: guysoft/CustomPiOS
          path: CustomPiOS

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          path: repository
          submodules: true

      # NEW LOGIC: drop apt/dpkg/needrestart/policy-rc.d into the global overlay
      # so they exist in the rootfs BEFORE CustomPiOS runs any apt actions.
      - name: Force noninteractive apt/dpkg via base overlay
        run: |
          set -euo pipefail
          BASE="repository/src/filesystem"
          mkdir -p "$BASE/etc/apt/apt.conf.d" \
                   "$BASE/etc/dpkg/dpkg.cfg.d" \
                   "$BASE/etc/needrestart/conf.d" \
                   "$BASE/usr/sbin" \
                   "$BASE/etc"

          # Make apt noninteractive and install maintainer versions for changed conffiles
          cat > "$BASE/etc/apt/apt.conf.d/90force-noninteractive" <<'EOF'
          APT::Get::Assume-Yes "true";
          Acquire::Retries "5";
          Dpkg::Options { "--force-confdef"; "--force-confnew"; };
          DPkg::Options { "--force-confdef"; "--force-confnew"; };
          EOF

          # Belt-and-suspenders: dpkg config read even outside apt
          cat > "$BASE/etc/dpkg/dpkg.cfg.d/force-conf" <<'EOF'
          force-confdef
          force-confnew
          EOF

          # Prevent "needrestart" from prompting
          cat > "$BASE/etc/needrestart/conf.d/10-auto.conf" <<'EOF'
          $nrconf{restart} = 'a';
          $nrconf{kernelhints} = 0;
          EOF

          # Block service restarts inside the chroot
          cat > "$BASE/usr/sbin/policy-rc.d" <<'EOF'
          #!/bin/sh
          exit 101
          EOF
          chmod +x "$BASE/usr/sbin/policy-rc.d"

          # Also set the debconf frontend (helps with tzdata et al.)
          if [ ! -f "$BASE/etc/environment" ] || ! grep -q '^DEBIAN_FRONTEND=noninteractive' "$BASE/etc/environment"; then
            echo 'DEBIAN_FRONTEND=noninteractive' >> "$BASE/etc/environment"
          fi

      - name: Download Raspberry Pi OS (armhf lite)
        run: |
          cd repository/src/image
          wget -c --trust-server-names 'https://downloads.raspberrypi.org/raspios_lite_armhf_latest'

      - name: Update CustomPiOS paths
        run: |
          cd repository/src
          ../../CustomPiOS/src/update-custompios-paths

      # (Optional) sanity check that qemu binfmt is registered
      - name: Show qemu binfmt registrations
        run: |
          sudo update-binfmts --display qemu-arm || true
          sudo update-binfmts --display qemu-aarch64 || true

      - name: Build Image
        env:
          # Helps avoid interactive postinsts in chroot (tzdata, etc.)
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo modprobe loop
          cd repository/src
          sudo bash -x ./build_dist

      - name: Copy output image
        if: success()
        id: copy
        run: |
          source repository/src/config
          image=PiFireOS-${{ github.ref_name }}
          cp repository/src/workspace/*.img ${image}.img
          echo "image=${image}" >> $GITHUB_ENV

      - name: Compress image
        if: success()
        run: zip "${{ env.image }}.zip" "${{ env.image }}.img"

      - name: Upload to release - ${{ github.ref_name }}
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.image }}.zip

      # --- Diagnostics: always keep logs so we know why anything failed ---
      - name: Print last lines of build.log on failure
        if: failure()
        run: |
          echo "===== repository/src/build.log (tail) ====="
          tail -n 400 repository/src/build.log || true

      - name: Upload build & chroot logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: custompios-logs
          path: |
            repository/src/build.log
            repository/src/workspace/build.log
            repository/src/workspace/chroot/var/log/apt/term.log
            repository/src/workspace/chroot/var/log/dpkg.log
            repository/src/workspace/chroot/var/log/apt/history.log
          if-no-files-found: warn
